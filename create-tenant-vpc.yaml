# 7-7-2020
#
# Parameters
Parameters:
  CidrBlock:
    AllowedValues:
      - 172.16.16.0/21
      - 172.16.24.0/21
      - 172.16.32.0/21
      - 172.16.40.0/21
      - 172.16.48.0/21
      - 172.16.56.0/21
      - 172.16.64.0/21
      - 172.16.72.0/21
      - 172.16.80.0/21
      - 172.16.88.0/21
      - 172.16.96.0/21
      - 172.16.104.0/21
      - 172.16.112.0/21
      - 172.16.120.0/21
      - 172.16.128.0/21
      - 172.16.136.0/21
      - 172.16.144.0/21
      - 172.16.152.0/21
      - 172.16.160.0/21
    ConstraintDescription: Invalid IP block
    Description: VPC CIDR blocks
    Type: String
  JiraTicket:
    Description: Jira ticket
    Type: String
#
# Mapping
#
# Resources
Resources:
# Vpc
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
  Ipv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref Vpc
# Igw
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}Igw'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
# Eigw
  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref Vpc
# Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 9 ] ]
      Ipv6CidrBlock: !Select [ 0, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 256, 64 ] ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}PublicSubnet1'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
      VpcId: !Ref Vpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 9 ]]
      Ipv6CidrBlock: !Select [ 1, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 256, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateSubnet1'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
      VpcId: !Ref Vpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 9 ]]
      Ipv6CidrBlock: !Select [ 2, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 256, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}PublicSubnet2'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
      VpcId: !Ref Vpc
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6CidrBlock
    Properties:
      AssignIpv6AddressOnCreation: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 9 ]]
      Ipv6CidrBlock: !Select [ 3, !Cidr [ !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks], 256, 64 ]]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateSubnet2'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
      VpcId: !Ref Vpc
# Route tables
  PublicSubnetRtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}PublicSubnetRtb'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
      VpcId: !Ref Vpc
  PrivateSubnetRtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}PrivateSubnetRtb'
        - Key: TenantId
          Value: !Select [ 0, !Split [ 'Vpc', !Sub '${AWS::StackName}' ] ]
        - Key: JiraTicket
          Value: !Ref JiraTicket
      VpcId: !Ref Vpc
# Route table associations
  PublicSubnet1RtbAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRtb
      SubnetId: !Ref PublicSubnet1
  PrivateSubnet1RtbAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRtb
      SubnetId: !Ref PrivateSubnet1
  PublicSubnet2RtbAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRtb
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet2RtbAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnetRtb
      SubnetId: !Ref PrivateSubnet2
# Routes
  PublicSubnetIpv4DefaultRoute:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRtb
  PublicSubnetIpv6DefaultRoute:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRtb
  PrivateSubnetIpv6DefaultRoute:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway
      RouteTableId: !Ref PrivateSubnetRtb
#
# Outputs
Outputs:
  VpcCidrBlock:
    Value: !GetAtt Vpc.CidrBlock
  VpcIpv6CidrBlock:
    Value: !Select [ 0, !GetAtt Vpc.Ipv6CidrBlocks ]
#  PublicSubnet1Ipv6CidrBlock:
#    Value: !Select [ 0, !GetAtt PublicSubnet1.Ipv6CidrBlocks ]
  PrivateSubnet1Ipv6CidrBlock:
    Value: !Select [ 0, !GetAtt PrivateSubnet1.Ipv6CidrBlocks ]
  PublicSubnet2Ipv6CidrBlock:
    Value: !Select [ 0, !GetAtt PublicSubnet2.Ipv6CidrBlocks ]
  PrivateSubnet2Ipv6CidrBlock:
    Value: !Select [ 0, !GetAtt PrivateSubnet2.Ipv6CidrBlocks ]
  VpcId:
    Value: !Ref Vpc
